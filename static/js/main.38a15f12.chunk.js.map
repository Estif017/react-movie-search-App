{"version":3,"sources":["Components/SearchMovies.js","Components/DisplaYconetent.js","Components/fettchingMovie.js","App.js","serviceWorker.js","index.js"],"names":["SearchMovies","props","onSubmit","getMovies","type","value","query","onChange","setQuery","placeholder","DisplaYconetent","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","FettchingMovie","useState","movies","setMovie","e","a","preventDefault","url","fetch","response","json","data","results","console","log","target","filter","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAEaA,EAAe,SAACC,GAG5B,OACC,0BAAMC,SAAUD,EAAME,WACrB,2BACCC,KAAK,OACLC,MAAOJ,EAAMK,MACbC,SAAUN,EAAMO,SAChBC,YAAY,qBAEb,4CCXUC,EAAkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEjC,OACC,yBAAKC,UAAU,QACd,yBACCA,UAAU,cACVC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,YAEpB,yBAAKJ,UAAU,iBACd,wBAAIA,UAAU,eAAeD,EAAMK,OACnC,2BACC,gDAAsBL,EAAMM,eAE7B,2BACC,0CAAgBN,EAAMO,eAEvB,uBAAGN,UAAU,cAAcD,EAAMQ,aCfxBC,EAAiB,WAAO,IAAD,EACTC,mBAAS,IADA,mBAC5Bf,EAD4B,KACrBE,EADqB,OAERa,mBAAS,IAFD,mBAE5BC,EAF4B,KAEpBC,EAFoB,KAG7BpB,EAAS,uCAAG,WAAOqB,GAAP,mBAAAC,EAAA,6DACjBD,EAAEE,iBADe,SAGD,mCACTC,EAJU,4DAGD,mCAHC,iCAIgFrB,EAJhF,wCAKOsB,MAAMD,GALb,cAKVE,EALU,gBAMGA,EAASC,OANZ,OAMVC,EANU,OAOhBR,EAASQ,EAAKC,SACdC,QAAQC,IAAIZ,GARI,kDAUhBW,QAAQC,IAAR,MAVgB,0DAAH,sDAaf,OACC,6BACC,kBAAC,EAAD,CACC/B,UAAWA,EACXG,MAAOA,EACPE,SAAU,SAACgB,GAAD,OAAOhB,EAASgB,EAAEW,OAAO9B,UAEpC,yBAAKO,UAAU,aACbU,EACCc,QAAO,SAACzB,GAAD,OAAWA,EAAMG,eACxBuB,KAAI,SAAC1B,GAAD,OAEJ,kBAAC,EAAD,CAAiBA,MAAOA,EAAO2B,IAAK3B,EAAM4B,WCnBjCC,MATf,WACC,OACC,yBAAK5B,UAAU,aACd,wBAAIA,UAAU,SAAd,sBACA,kBAAC,EAAD,QCIiB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.38a15f12.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const SearchMovies = (props) => {\r\n\t// const [query, setQuery] = useState('');\r\n\t// console.log(props);\r\n\treturn (\r\n\t\t<form onSubmit={props.getMovies}>\r\n\t\t\t<input\r\n\t\t\t\ttype='text'\r\n\t\t\t\tvalue={props.query}\r\n\t\t\t\tonChange={props.setQuery}\r\n\t\t\t\tplaceholder='serch for movies'\r\n\t\t\t/>\r\n\t\t\t<button>Search</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n","import React from 'react';\r\n\r\nexport const DisplaYconetent = ({ movie }) => {\r\n\t// console.log('props=>', movie);\r\n\treturn (\r\n\t\t<div className='card'>\r\n\t\t\t<img\r\n\t\t\t\tclassName='card--image'\r\n\t\t\t\tsrc={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n\t\t\t\talt={movie.title + ' poster'}\r\n\t\t\t/>\r\n\t\t\t<div className='card--content'>\r\n\t\t\t\t<h3 className='card--title'>{movie.title}</h3>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<small>RELEASE DATE: {movie.release_date}</small>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<small>RATING: {movie.vote_average}</small>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className='card--desc'>{movie.overview}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useState } from 'react';\r\nimport { SearchMovies } from './SearchMovies';\r\nimport { DisplaYconetent } from './DisplaYconetent';\r\n\r\nexport const FettchingMovie = () => {\r\n\tconst [query, setQuery] = useState('');\r\n\tconst [movies, setMovie] = useState([]);\r\n\tconst getMovies = async (e) => {\r\n\t\te.preventDefault();\r\n\t\ttry {\r\n\t\t\tconst apiKey = 'f5a8c8a9d2252183d14255ac6a0493be';\r\n\t\t\tconst url = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\t\t\tconst response = await fetch(url);\r\n\t\t\tconst data = await response.json();\r\n\t\t\tsetMovie(data.results);\r\n\t\t\tconsole.log(movies);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<SearchMovies\r\n\t\t\t\tgetMovies={getMovies}\r\n\t\t\t\tquery={query}\r\n\t\t\t\tsetQuery={(e) => setQuery(e.target.value)}\r\n\t\t\t/>\r\n\t\t\t<div className='card-list'>\r\n\t\t\t\t{movies\r\n\t\t\t\t\t.filter((movie) => movie.poster_path)\r\n\t\t\t\t\t.map((movie) => (\r\n\t\t\t\t\t\t//    <MovieCard movie={movie} key={movie.id} />\r\n\t\t\t\t\t\t<DisplaYconetent movie={movie} key={movie.id} />\r\n\t\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { FettchingMovie } from './Components/fettchingMovie';\n\nfunction App() {\n\treturn (\n\t\t<div className='container'>\n\t\t\t<h1 className='title'>React Movie Search</h1>\n\t\t\t<FettchingMovie />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}